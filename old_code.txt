void display_question(Question* question, int index){

    move(0,0);
    hline('%',COLS);
    vline('H',LINES);
    mvvline(0,COLS-1,'H',LINES);
    mvhline(LINES-1,0,'%',COLS);
    refresh();
    print_copyrights(stdscr);
    print_question_index(stdscr,index);
    print_question_sentence(stdscr,question->question);
    print_fifty_option(stdscr);
    print_skip_option(stdscr);
    print_indications(stdscr);


    WINDOW* answers_window;

    int len_a= strlen(question->a_answer);
    int len_b= strlen(question->b_answer);
    int len_c= strlen(question->c_answer);
    int len_d= strlen(question->d_answer);

    int len[4]={len_a,len_b,len_c,len_d};

    int max1= len[0];
    for(int i=1;i<4;i++){
        if(len[i]>max1){
            max1=len[i];
        }
    }
    
    answers_window=newwin(11,max1+8,LINES/2-LINES/8,(COLS-max1-8)/2);
    keypad(answers_window,TRUE);
    int win_x;
    int win_y;
    getmaxyx(answers_window,win_y,win_x);
    
    mvwprintw(answers_window,2,(win_x-len_a)/2,"%s",question->a_answer);
    mvwprintw(answers_window,4,(win_x-len_b)/2,"%s",question->b_answer);
    mvwprintw(answers_window,6,(win_x-len_c)/2,"%s",question->c_answer);
    mvwprintw(answers_window,8,(win_x-len_d)/2,"%s",question->d_answer);
    wrefresh(answers_window);

    box(answers_window,0,0);
    wrefresh(answers_window);
    refresh();

    int curr_selected=0;
    int breakOut=0;
    int toHighlight=0;
    int c;
    int line=2;

    mvwprintw(answers_window,line,1,"->");
    wrefresh(answers_window);

    while(!breakOut){

        toHighlight=0;
        c=wgetch(answers_window);
        switch(c){
            case KEY_UP:
                curr_selected-=1;
                if(curr_selected<0)
                    curr_selected+=4;
                curr_selected=curr_selected%4;
                //mvprintw(LINES-2,1,"%d",curr_selected);
                //refresh();
                toHighlight=1;
                break;
            case KEY_DOWN:
                curr_selected+=1;
                curr_selected=curr_selected%4;
                toHighlight=1;
                //mvprintw(LINES-2,1,"%d",curr_selected);
                //refresh();
                break;
            case 10:
                breakOut=1;
                mvprintw(LINES-2,1," Ai selectat: %d",curr_selected+1);
                refresh();
                break;
            case 113:
                breakOut=1;
                break;
            default:
                break;
        }
        mvwprintw(answers_window,line,1,"  ");
        wrefresh(answers_window);
        if(toHighlight){
             switch(curr_selected){
            case 0:
                line=2;
                break;
            case 1:
                line =4;
                break;
            case 2:
                line =6;
                break;
            case 3:
                line = 8;
                break;
        }
        mvwprintw(answers_window,line,1,"->");
        wrefresh(answers_window);
        }    
    }

    getch();
}
*/

/*
void show_start_menu(GameStat* gameStat, int canResume){

    char* choices[]={
        "New Game",
        "Resume Game",
        "Quit",
    };

    char welcome_text[]={"Welcome to Trivia"};
    mvprintw(2,(COLS-strlen(welcome_text))/2,"%s",welcome_text);
    refresh();

    wmove(stdscr,LINES/4,COLS/2);
    print_question_mark(stdscr,3,3);
    print_question_mark(stdscr,3,COLS-15);

    print_copyrights(stdscr);

    ITEM **my_items;
    MENU *myMenu;
    int n_choices=3;
    ITEM* curr_item;
    WINDOW* my_menu_window;

    int width=26;

    my_menu_window=newwin(10,width,LINES/2-5,COLS/2-width/2);
    keypad(my_menu_window,TRUE);

    my_items=(ITEM **)calloc(n_choices+1,sizeof(ITEM *));
    
    int i;
    for(i=0;i<n_choices;++i){
        my_items[i]=new_item(choices[i],NULL);
    }
    set_item_userptr(my_items[0],start_new_game);
    set_item_userptr(my_items[1],resume_game);
    set_item_userptr(my_items[2],quit_trivia);

    my_items[n_choices]=(ITEM*)NULL;
    myMenu=new_menu((ITEM**)my_items);

    set_menu_win(NULL,my_menu_window);
    set_menu_sub(myMenu,derwin(my_menu_window,6,width-2,3,2));
    set_menu_mark(myMenu," ");
    
    box(my_menu_window,0,0);


    post_menu(myMenu);
    wrefresh(my_menu_window);

    int break_out=false;
    
    int c;
    int toQuit=0;

    while(!break_out)
	{   
        c = wgetch(my_menu_window);    
        switch(c)
	        {	
            case KEY_DOWN:
				menu_driver(myMenu, REQ_DOWN_ITEM);
				break;

			case KEY_UP:
				menu_driver(myMenu, REQ_UP_ITEM);
				break;

			case 10:
                break_out=true;
                ITEM* cur = current_item(myMenu);
                int curr_item_index = item_index(cur);
                switch(curr_item_index){
                    case 0:
                        start_new_game();
                        break;
                    case 1:
                        resume_game(NULL);
                        break;
                    case 2:
                        toQuit=true;
                        break;
                }
				break;

            case KEY_F(1):
                break_out=true;
                break;
		    }
            
        wrefresh(my_menu_window);
	}	

    unpost_menu(myMenu);
   
    for(i = 0; i < n_choices; ++i){
        free_item(my_items[i]);
    }
    free_menu(myMenu);
    wborder(my_menu_window, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ');
    wrefresh(my_menu_window);
    delwin(my_menu_window);
    refresh();
    erase();
    refresh();
    //getch();
    if(toQuit){
        quit_trivia();
    }
    //getch();
}*/



